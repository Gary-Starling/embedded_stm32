/*-----------------------------------------------------------*/
/*r0 r1 r2 r3 r12 lr pc psr регистры сохраняются автоматически на текущий стек, стековый кадр stacking 
Кадр стека включает адрес возврата.
Это адрес следующей инструкции в прерванной программе.
Это значение восстанавливается в PC при возврате исключения, 
так что прерванная программа возобновляется. */

/* в момент
системного вызова происходит сохранение
R0–R3, R12, LR, PC и PSR с адреса памяти,
на который указывает PSP. Обработчик прерывания работает с указателем MSP, поэтому не влияет на PSP, при этом указатель PSP
доступен в обработчике прерываний */
xPortPendSVHandler:  //на стеке текущего потока уже лежит часть регистров
	mrs r0, psp                     /* Пишем в R0 адрес вершшины стека потока*/
        
	ldr	r3, =pxCurrentTCB	/* В R3 current TCB(указатель на блок - адрес метки)*/
	ldr	r2, [r3]                /* В R2 содержимое по адресу R3*/

	subs r0, r0, #32		/* Вычли 32 из R0 (8 регистров) стек растёт вниз, нам нужно упаковать еще 8 регистров R4–R11. */
	str r0, [r2]			/* сохраним в R0 адрес смещения(новая верхушка). */
	stmia r0!, {r4-r7}		/* сохраним с адреса r0(там верхушка стека) r4-r7. r0 увеличится на количество слов(регистров)*/
	mov r4, r8			/* в r4 содержимое R8. */
	mov r5, r9                      /* в r5 содержимое r9 */
	mov r6, r10                     /* в r6 содержимое r10 */
	mov r7, r11                     /* в r7 содержимое r11 */              
	stmia r0!, {r4-r7}              /* сохранили остальные регистры */

	push {r3, r14}                  /* в основной стек поместим r3(TCB) и LR */
	cpsid i                         /* Выключить прерывания */
	bl vTaskSwitchContext           /* Переключем контекст выполнив vTaskSwitchContext (вызов подпрограммы тут меняются указатели)*/
	cpsie i                         /* Включим */
	pop {r2, r3}			/* lr у нас в r3. в r2 tcb указатель. Выгрузим их из стека */
        /* теперь всё в обратном порядке восстанавливае, стековый кадр вернётся сам*/
	ldr r1, [r2]                    /* в r1 содержимое r2 т.е адрес TCB */
	ldr r0, [r1]			/* первое значение в pxCurrentTCB это верхушка стека. */
	adds r0, r0, #16		/* добавим 16 чтобы добраться до старших регистров +4 слова. */
	ldmia r0!, {r4-r7}		/* выгрузим их из стека. */
	mov r8, r4
	mov r9, r5
	mov r10, r6
	mov r11, r7

	msr psp, r0			/* перепишем адрес вершины стека. */

	subs r0, r0, #32		/* вычтем 32 для малдших регистров */
	ldmia r0!, {r4-r7}		/* выгрузим младшие регистры, */

	bx r3           //Возвращаемся в Thread режим, используем стек процесса PSP

/*-----------------------------------------------------------*/